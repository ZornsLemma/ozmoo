!% -~S
!% $OMIT_UNUSED_ROUTINES=1

! Inform Randomization Test version 1.1, by David Griffith August 2002,
! Fredrik Ramsberg 2023
!
! Simulates dropping balls through a grid of pegs to test the
! interpreter's random number generator.  A bellcurve should be the
! result.
!
! Also contains Andrew Hunter's randomization test which is found in the
! Zoom tarball.  I'm not quite sure how it displays randomness, but I
! put it in here anyway.
!

Global delay = 0;
Global screen_height = 0;
Global screen_width = 0;
Global horisontal_mode = 0;
Global turbo_mode = 0;
Constant MAX_LANES 80;
Array bin --> MAX_LANES + 1;

! For the Bell curve test
Constant BELL_RESERVED_ROWS = 2;
Global lanes = MAX_LANES;
Global peg_height = MAX_LANES / 2;
Global mid_lane = MAX_LANES / 2;
Global granularity = 1;
Global dropcount = 0;
Global max_bar_height = 0;
Global top_bar_height = 0;
Global bar_base_char = '=';
Global mid_bar_char = '|';

! For the spread random test
Constant SPREAD_RESERVED_ROWS = 2;
!Constant usualIter = 20000;
!Constant time = 50;
Global iterations = 0;
!Array count --> 70;

! Drop a ball into a given lane.  Return the number of the bin the ball
! eventually falls into.  A ball should never have the opportunity to
! bounce to the left if it's already at the very left of the pegfield.
! Likewise for the very right.  Therefore, balls should always be
! dropped into the very middle.
!
[ drop p_current_lane _x;
	dropcount++;
	for (_x = PEG_HEIGHT: _x > 0: _x--) {
		if (random(2) == 1) {	! Ball bounces left.
			p_current_lane--;
!			if (p_current_lane < 0)
!				p_current_lane = 0;
		} else {	! Ball bounces right.
			p_current_lane++;
!			if (p_current_lane >= LANES)
!				p_current_lane = LANES - 1;
		}
	}
	return p_current_lane;
];

[ redraw_bellcurve _x _y _q _top _temp;

	@set_window 1;
	@erase_window 1;

!	@set_cursor 1 1;
!	print "prev: ", Dropcount_last;
	@set_cursor 1 1;
	print "drops: ";
	@set_cursor 1 8;
	print dropcount;
	@set_cursor 2 1;
	print "granularity: ", granularity;
	@set_cursor 1 20;
	print "<space>: Pause.";
	@set_cursor 2 20;
	print "'q': Quit.";

	top_bar_height = 0;

	for (_x = 0: _x <= lanes: _x++) {
		_top = bin-->_x / granularity;
		if (_top < 0) {
			_top = 0;
		}
		if (_top > top_bar_height) {
			top_bar_height = _top;
		}
		if(top_bar_height >= max_bar_height)
			_top = max_bar_height; ! Draw for now, this will trigger a granularity increase
		for (_y = 0: _y <= _top: _y++) {
			if(horisontal_mode) {
				_q = _y + 1;
				_temp = _x / 2 + BELL_RESERVED_ROWS + 1;
				@set_cursor _temp _q;
			} else {
				_q = screen_height - _y - 1;
				@set_cursor _q _x;
			}
			if(_y == 0)
				print (char) bar_base_char;
			else if (_x == mid_lane)
				print (char) mid_bar_char;
			else
				print (char) 'o';
		}
	}
];

[ update_bellcurve p_lane _top _q _temp;
	_top = bin-->p_lane;
	if(_top % granularity == 0) {
		_top = _top / granularity;
		! if (_top < 0) {
			! _top = 0;
		! }
		if (_top > top_bar_height) {
			top_bar_height = _top;
		}
		if(top_bar_height >= max_bar_height)
			_top = max_bar_height; ! Draw for now, this will trigger a granularity increase
		if(horisontal_mode) {
			_q = _top + 1;
			_temp = p_lane / 2 + BELL_RESERVED_ROWS + 1;
!			_temp = p_lane / 2 + 4;
			@set_cursor _temp _q;
		} else {
			_q = screen_height - _top - 1;
			@set_cursor _q p_lane;
		}
		! _q = screen_height - _top;
		! _temp = p_lane / 2;
		! @set_cursor _q _temp;
		if (p_lane == mid_lane)
			print (char) mid_bar_char;
		else
			print (char) 'o';
	}
	@set_cursor 1 8;
	print dropcount;
];

[ Main_bellcurve _x _num _crap;

	if(horisontal_mode) {
		bar_base_char = '|';
		mid_bar_char = '-';
		lanes = ((screen_height - BELL_RESERVED_ROWS) / 2) * 4; ! The highest even number that fits
		max_bar_height = screen_width - 1;
	} else {
		bar_base_char = '=';
		mid_bar_char = '|';
		lanes = (screen_width / 2) * 2; ! The highest even number that fits
		max_bar_height = screen_height - BELL_RESERVED_ROWS - 1;
	}
	if(lanes > MAX_LANES)
		lanes = MAX_LANES;
	peg_height = lanes / 2;
	mid_lane = lanes / 2;

	@set_window 0;
	@erase_window -1;


	print "^^This program drops ~balls~ from the very top-middle of
a vertical two-dimensional field filled with pegs.  The balls bounce off
the pegs either left or right until they drop into one of several slots
at the bottom where they stack up.  If a ball always
bounces left, it will fall into the leftmost slot.
According to the laws of probability, if the bounces are totally random,
a smooth bellcurve should appear when the balls are counted and put into
a bar graph.  This program displays such a bar graph.^";

	print "^A ball which settles in the center of the field is
represented by '", (char) mid_bar_char, "'.^";

	print "A ball which settles to the left or right of the center
is represented by 'o'.^";

	! print "^How many drops (1 through 9) per ball drawn? ";

	! @read_char 1 ix;
	! if (ix >= '1' && ix <= '9') {
		! Granularity = ix - '0';
	! } else {
		! Granularity = 1;
	! }

	print "^^Press any key to begin.  ";
	@read_char 1 -> _crap;

	@split_window screen_height;

	for (_num = 0: _num < lanes: _num++) {
		bin-->_num = 0;
	}

	dropcount = 0;
	granularity = 1;
	redraw_bellcurve();
	
	while (1) {
		_x = -1;
		while(_x < 0 || _x >= LANES)
			_x = drop(mid_lane);
		bin-->_x = bin-->_x + 1;
		update_bellcurve(_x);
		if (top_bar_height >= max_bar_height) {
			granularity = granularity * 2;
			redraw_bellcurve();
		}

		if(delay > 0 || turbo_mode == false || dropcount % 32 == 0) {
			_crap = 0;
			if(delay == 0) {
				if(dropcount % granularity == 0)
					@read_char 1 1 pause -> _crap;
			} else
				@read_char 1 delay pause -> _crap;
			if (_crap >= '0' && _crap <= '9') {
				delay = _crap - '0';
			} else if (_crap == ' ') {
				@set_cursor 1 20;
				print "===  Paused ===";
				@read_char 1 -> _crap;
				redraw_bellcurve();
			} else if (_crap == 'q' or 'Q') {
				@erase_window -1;
				rtrue;
!				break;
			}
		}

		! if(delay == 0) {
			! _crap = 0;
			! if(dropcount % granularity == 0)
				! @read_char 1 1 pause -> _crap;
		! } else
			! @read_char 1 delay pause -> _crap;

		! if (_crap >= '0' && _crap <= '9') {
			! delay = _crap - '0';
		! } else if (_crap == ' ') {
! !			@erase_window 1;
			! @set_cursor 1 20;
			! print "===  Paused ===";
			! @read_char 1 -> _crap;
			! redraw_bellcurve();
		! } else if (_crap == 'q' or 'Q') {
			! @erase_window -1;
			! rtrue;
		! }
	}
];



[ redraw_spread _x _y _q _top _temp;

	@split_window screen_height;
	@erase_window -2;
	@set_window 1;

	@set_cursor 1 1;
	print "iterations: ";
	@set_cursor 1 13;
	print iterations;
	@set_cursor 2 1;
	print "granularity: ", granularity;
	@set_cursor 1 20;
	print "<space>: Pause.";
	@set_cursor 2 20;
	print "'q': Quit.";

	top_bar_height = 0;

	for (_x = 0: _x < lanes: _x++) {
		_top = bin-->_x / granularity;
		if (_top > top_bar_height) {
			top_bar_height = _top;
		}
		if(top_bar_height >= max_bar_height)
			_top = max_bar_height; ! Draw for now, this will trigger a granularity increase
		for (_y = 0: _y <= _top: _y++) {
			if(horisontal_mode) {
				_q = _y + 1;
				_temp = _x + BELL_RESERVED_ROWS + 1;
				@set_cursor _temp _q;
			} else {
				_q = screen_height - _y - 1;
				@set_cursor _q _x;
			}
			if(_y == 0)
				print (char) bar_base_char;
			! else if (_x == mid_lane)
				! print (char) mid_bar_char;
			else
				print (char) 'o';
		}
	}
];

[ update_spread p_lane _top _q _temp;
	_top = bin-->p_lane;
	if(_top % granularity == 0) {
		_top = _top / granularity;
		if (_top > top_bar_height) {
			top_bar_height = _top;
		}
		if(top_bar_height >= max_bar_height)
			_top = max_bar_height; ! Draw for now, this will trigger a granularity increase
		if(horisontal_mode) {
			_q = _top + 1;
			_temp = p_lane + BELL_RESERVED_ROWS + 1;
!			_temp = p_lane / 2 + 4;
			@set_cursor _temp _q;
		} else {
			_q = screen_height - _top - 1;
			@set_cursor _q p_lane;
		}
		print (char) 'o';
	}
	@set_cursor 1 13;
	print iterations;
];

[ Main_spread _x _crap;

	if(horisontal_mode) {
		bar_base_char = '|';
		mid_bar_char = '-';
		lanes = screen_height - SPREAD_RESERVED_ROWS;
		max_bar_height = screen_width - 1;
	} else {
		bar_base_char = '=';
		mid_bar_char = '|';
		lanes = screen_width;
		max_bar_height = screen_height - SPREAD_RESERVED_ROWS - 1;
	}
	if(lanes > 80)
		lanes = 80;

	for (_x = 0: _x < lanes: _x++) {
		bin-->_x = 0;
	}

	iterations = 0;
	granularity = 1;
	redraw_spread();
	
	while (1) {
		_x = -1;
		_x = random(lanes) - 1;
		bin-->_x = bin-->_x + 1;
		iterations++;
		update_spread(_x);
		if (top_bar_height >= max_bar_height) {
			granularity = granularity * 2;
			redraw_spread();
		}

		! If delay is 0 and turbo mode enabled, allow key reads every 32 iterations
		if(delay > 0 || turbo_mode == false || iterations % 32 == 0) {
			_crap = 0;
			if(delay == 0) {
				if(iterations % granularity == 0)
					@read_char 1 1 pause -> _crap;
			} else
				@read_char 1 delay pause -> _crap;
			if (_crap >= '0' && _crap <= '9') {
				delay = _crap - '0';
			} else if (_crap == ' ') {
				@set_cursor 1 20;
				print "===  Paused ===";
				@read_char 1 -> _crap;
				redraw_spread();
			} else if (_crap == 'q' or 'Q') {
				break;
			}
		}
		
	}

	@read_char 1 -> _x;

	@erase_window -1;

!	Height = $24-->0;

	! while (1) {
		! randomize_spread();
		! display_spread();
		! @read_char -> x;
	! }
];

[ Main _mychar;
	screen_height = $20->0;
	screen_width = $21->0;
	while (1) {
		print "^Inform Randomization Test version 1.1, by David
		Griffith August 2002, Fredrik Ramsberg 2023^^
		During tests, press 0-9 to select delay (0 is default).^^";
		
		print "h) Horisontal bars.^";
		print "v) Vertical bars.^";
		print "q) Quit.^";
		print "ENTER/SPACE) Default (vertical bars).^";
		print "^Please select a mode: ";
		@read_char 1 _mychar;
		switch (_mychar) {
			'h':	horisontal_mode = true;
			'q':	rtrue;
			default: horisontal_mode = false;
		}
		new_line;

		print "t) Turbo mode.^";
		print "n) Not turbo mode.^";
		print "ENTER/SPACE) Default (Turbo mode).^";
		print "^Please select a mode: ";
		@read_char 1 _mychar;
		switch (_mychar) {
			'n':	turbo_mode = false;
			'q':	rtrue;
			default: turbo_mode = true;
		}
		new_line;

		print "1) Bellcurve graph.^";
		print "2) Spread graph.^";
		print "^Please select a test: ";
		@read_char 1 _mychar;
		switch (_mychar) {
			'1':	Main_bellcurve();
			'2':	Main_spread();
			default: print "^";
		}
	}
];

[ pause;
	rtrue;
];
